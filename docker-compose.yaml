# 通用环境
version: '3.0'

networks:
  net01:
    driver: bridge

services:
  mysql:
      image: bitnami/mysql:8.0  # sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/mysql:8.0 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/mysql:8.0 bitnami/mysql:8.0
      container_name: mysql
      hostname: mysql
      privileged: true
      ports:
        - "64656:30336"
      environment:
        TZ: Asia/Shanghai
        # 这里123456改成自己的密码
        MYSQL_ROOT_PASSWORD: BazKT%HlbsP3
      volumes:
        - "./mysql/data:/bitnami/mysql/data" # sudo rm -rf mysql ; sudo mkdir mysql && sudo chown -R 1001:1001 mysql
        - "./mysql/conf:/opt/bitnami/mysql/conf"
      networks:
        - net01
      healthcheck:
        test: [ 'CMD', '/opt/bitnami/scripts/mysql/healthcheck.sh' ]
        interval: 10s
        timeout: 5s
        retries: 6
  redis:
    image: bitnami/redis:7.0 # sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/redis:7.0 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/redis:7.0 bitnami/redis:7.0
    container_name: redis # sudo docker pull
    hostname: redis
    privileged: true
    environment:
         - REDIS_PASSWORD=cxc20060601
    ports:
      - "6379:6379"
    volumes:
      - "./redis/data:/bitnami/redis/data"
      - "./redis/conf:/opt/bitnami/redis/etc"
    networks:
      - net01
#----------------------------------------------------------------------------------------------
#  #mysql环境# https://github.com/bitnami/containers/tree/main/bitnami/mysql#how-to-use-this-image
#  #todo sudo rm -rf mysql ; sudo mkdir -p mysql/data mysql/conf  && sudo chown -R 1001:1001 mysql &&  sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/mysql:8.0 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/mysql:8.0 bitnami/mysql:8.0
#  mysql:
#    image: bitnami/mysql:8.0  # sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/mysql:8.0 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/mysql:8.0 bitnami/mysql:8.0
#    container_name: mysql
#    hostname: mysql
#    privileged: true
#    ports:
#      - "3306:3306"
#    environment:
#      TZ: Asia/Shanghai
#      # 这里123456改成自己的密码
#      MYSQL_ROOT_PASSWORD: 123456
#    volumes:
#      - "./mysql/data:/bitnami/mysql/data" # sudo rm -rf mysql ; sudo mkdir mysql && sudo chown -R 1001:1001 mysql
#      - "./mysql/conf:/opt/bitnami/mysql/conf"
#    networks:
#      - net01
#    healthcheck:
#      test: [ 'CMD', '/opt/bitnami/scripts/mysql/healthcheck.sh' ]
#      interval: 10s
#      timeout: 5s
#      retries: 6
#----------------------------------------------------------------------------------------------
#  #etcd环境# https://github.com/bitnami/containers/tree/main/bitnami/etcd
#  #todo sudo rm -rf etcd ; sudo mkdir -p etcd/data etcd/conf && sudo chown -R 1001:1001 etcd && sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/etcd:3.5 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/etcd:3.5 bitnami/etcd:3.5 && sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/etcdkeeper:v0.7.6 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/etcdkeeper:v0.7.6 evildecay/etcdkeeper:v0.7.6
#  etcd:
#    hostname: etcd
#    image: bitnami/etcd:3.5 # sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/etcd:3.5 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/etcd:3.5 bitnami/etcd:3.5
#    container_name: etcd
#    privileged: true
#    volumes:
#      - "./etcd/data:/bitnami/etcd/data" # sudo rm -rf etcd ; sudo mkdir etcd && sudo chown -R 1001:1001 etcd
#      - "./etcd/conf:/opt/bitnami/etcd/conf"
#    environment:
#    # 时区设置
#      - TZ=Asia/Shanghai
#    # 允许无认证访问
#      - ALLOW_NONE_AUTHENTICATION=yes
#    # etcd 客户端访问URL
#      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
#    ports:
#      - "2379:2379"
#      - "2380:2380"
#    networks:
#      - net01
#    healthcheck:
#      test: ["CMD", "etcdctl", "endpoint", "health"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#  # ercd web管理工具 暴露端口 8099
#  etcdkeeper:
#    hostname: etcdkeeper
#    image: evildecay/etcdkeeper:v0.7.6 # sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/etcdkeeper:v0.7.6 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/etcdkeeper:v0.7.6 evildecay/etcdkeeper:v0.7.6
#    container_name: etcdkeeper
#    ports:
#      - "8099:8080"
#    environment:
#      - ETCD_ENDPOINT=http://etcd:2379
#    depends_on:
#      etcd:
#        condition: service_healthy
#    networks:
#      - net01
#---------------------------------------------------------------------------------------------
# postgres环境
#----------------------------------------------------------------------------------------------
#  #redis环境 # https://github.com/bitnami/containers/tree/main/bitnami/redis
#  #todo sudo rm -rf redis ; sudo mkdir -p redis/conf redis/data && sudo chown -R 1001:1001 redis && sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/redis:7.0 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/redis:7.0 bitnami/redis:7.0
#  redis:
#    image: bitnami/redis:7.0 # sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/redis:7.0 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/redis:7.0 bitnami/redis:7.0
#    container_name: redis # sudo docker pull
#    hostname: redis
#    privileged: true
#    environment:
#      - REDIS_PASSWORD=123456
#    ports:
#      - "26379:6379"
#    volumes:
#      - "./redis/data:/bitnami/redis/data"
#      - "./redis/conf:/opt/bitnami/redis/etc"
#    networks:
#      - net01
#----------------------------------------------------------------------------------------------
#  # kafka环境(集群) # https://github.com/bitnami/containers/tree/main/bitnami/kafka
#  # todo sudo rm -rf kafka ; sudo mkdir -p kafka/kafka_0/data kafka/kafka_1/data kafka/kafka_2/data && sudo chown -R 1001:1001 kafka && sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/kafka:3.7 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/kafka:3.7 bitnami/kafka:3.7
#  kafka-0:
#    container_name: kafka-0
#    hostname: kafka-0
#    image: bitnami/kafka:3.7 # sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/kafka:3.7 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/kafka:3.7 bitnami/kafka:3.7
#    privileged: true
#    ports:
#      - '9094:9094'
#    environment:
#      # KRaft settings
#      # 允许使用kraft，即Kafka替代Zookeeper
#      - KAFKA_ENABLE_KRAFT=yes
#      # broker.id，必须唯一
#      - KAFKA_CFG_NODE_ID=0
#      # kafka角色，做broker，也要做controller
#      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      # 集群地址
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
#      # 使用Kafka时的集群id，集群内的Kafka都要用这个id做初始化
#      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
#      # Listeners
#      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
#      # 定义外网访问地址（宿主机ip地址和端口）
#      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-0:9092,EXTERNAL://127.0.0.1:9094
#      # 定义监听器的安全协议
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
#      # 指定供外部使用的控制类请求信息
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      # 指定供内部使用的监听器名称
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
#      # 设置broker最大内存，和初始内存
#      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
#      # 不允许自动创建主题
#      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
#
#
#      # 集群设定
#      # 用于指定 offsets 主题的副本因子。offsets 主题用于存储消费者组的偏移量，这些偏移量用于跟踪每个消费者在日志中的位置
#      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
#      # 用于指定事务状态日志的副本因子。事务状态日志用于存储事务元数据，以便在发生故障时进行恢复
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
#        # 用于指定事务状态日志的最小 ISR。ISR 是一组同步副本，它们在故障情况下仍然可以继续工作
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
#    volumes:
#      - ./kafka/kafka_0/data:/bitnami/kafka/data
#      #- ./kafka/kafka_0/conf:/opt/bitnami/kafka/config
#    networks:
#      - net01
#
#  kafka-1:
#    container_name: kafka-1
#    hostname: kafka-1
#    image: bitnami/kafka:3.7
#    privileged: true
#    ports:
#      - '9095:9095'
#    environment:
#      # KRaft settings
#      # 允许使用kraft，即Kafka替代Zookeeper
#      - KAFKA_ENABLE_KRAFT=yes
#      # broker.id，必须唯一
#      - KAFKA_CFG_NODE_ID=1
#      # kafka角色，做broker，也要做controller
#      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      # 集群地址
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
#      # 使用Kafka时的集群id，集群内的Kafka都要用这个id做初始化
#      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
#      # Listeners
#      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9095
#      # 定义外网访问地址（宿主机ip地址和端口）
#      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-1:9092,EXTERNAL://127.0.0.1:9095
#      # 定义监听器的安全协议
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
#      # 指定供外部使用的控制类请求信息
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      # 指定供内部使用的监听器名称
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
#      # 设置broker最大内存，和初始内存
#      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
#      # 不允许自动创建主题
#      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
#
#
#      # 集群设定
#      # 用于指定 offsets 主题的副本因子。offsets 主题用于存储消费者组的偏移量，这些偏移量用于跟踪每个消费者在日志中的位置
#      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
#      # 用于指定事务状态日志的副本因子。事务状态日志用于存储事务元数据，以便在发生故障时进行恢复
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
#      # 用于指定事务状态日志的最小 ISR。ISR 是一组同步副本，它们在故障情况下仍然可以继续工作
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
#    volumes:
#      - ./kafka/kafka_1/data:/bitnami/kafka/data
#      #- ./kafka/kafka_1/conf:/opt/bitnami/kafka/config
#    networks:
#      - net01
#
#  kafka-2:
#    container_name: kafka-2
#    hostname: kafka-2
#    image: bitnami/kafka:3.7
#    privileged: true
#    ports:
#      - '9096:9096'
#    environment:
#      # KRaft settings
#      # 允许使用kraft，即Kafka替代Zookeeper
#      - KAFKA_ENABLE_KRAFT=yes
#      # broker.id，必须唯一
#      - KAFKA_CFG_NODE_ID=2
#      # kafka角色，做broker，也要做controller
#      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      # 集群地址
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
#      # 使用Kafka时的集群id，集群内的Kafka都要用这个id做初始化
#      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
#      # Listeners
#      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9096
#      # 定义外网访问地址（宿主机ip地址和端口）
#      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-2:9092,EXTERNAL://127.0.0.1:9096
#      # 定义监听器的安全协议
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
#      # 指定供外部使用的控制类请求信息
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      # 指定供内部使用的监听器名称
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
#      # 设置broker最大内存，和初始内存
#      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
#      # 不允许自动创建主题
#      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
#
#
#      # 集群设定
#      # 用于指定 offsets 主题的副本因子。offsets 主题用于存储消费者组的偏移量，这些偏移量用于跟踪每个消费者在日志中的位置
#      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
#      # 用于指定事务状态日志的副本因子。事务状态日志用于存储事务元数据，以便在发生故障时进行恢复
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
#      # 用于指定事务状态日志的最小 ISR。ISR 是一组同步副本，它们在故障情况下仍然可以继续工作
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
#    volumes:
#      - ./kafka/kafka_2/data:/bitnami/kafka/data
#      #- ./kafka/kafka_2/conf:/opt/bitnami/kafka/config
#    networks:
#      - net01
#----------------------------------------------------------------------------------------------
#  #jaeger链路追踪 — Jaeger for tracing https://github.com/bitnami/containers/tree/main/bitnami/jaeger
#  # todo sudo rm -rf jaeger ; mkdir jaeger && chown -R 1001:1001 jaeger && sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/jaeger:1 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/jaeger:1 bitnami/jaeger:1
#  jaeger:
#    container_name: jaeger
#    image: bitnami/jaeger:1 # sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/jaeger:1 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/jaeger:1 bitnami/jaeger:1
#    restart: unless-stopped
#    ports:
#      - 6831:6831
#      - 6832:6832
#      - 5778:5778
#      - 16686:16686
#      - 4317:4317
#      - 4318:4318
#      - 14250:14250
#      - 14268:14268
#      - 14269:14269
#      - 9411:9411
#    environment:
#      - SPAN_STORAGE_TYPE=elasticsearch
#      - ES_SERVER_URLS=http://elcsticsearch:9200
#      - LOG_LEVEL=debug
#    volumes:
#      - ./jaeger/data:/bitnami/jaeger/data # sudo rm -rf jaeger ; sudo mkdir jaeger && sudo chown -R 1001:1001 jaeger
#      - ./jaeger/conf:/opt/bitnami/jaeger/conf/config
##    depends_on:
##      elasticsearch:
##        condition: service_healthy
#    networks:
#      - net01
#----------------------------------------------------------------------------------------------
#  #elk三件套 elasticsearch logstash(还没用到没有写) kibana  注意 elasticsearch 和 kibana 在一台 2c2g 服务器上跑不动
#  # todo sudo rm -rf elasticsearch kibana ; sudo mkdir -p elasticsearch/data elasticsearch/conf kibana/data kibana/conf && sudo chown -R 1001:1001 elasticsearch kibana && sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/elasticsearch:8 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/elasticsearch:8 bitnami/elasticsearch:8 && sudo docker pull registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/kibana:8 && sudo docker tag registry.cn-guangzhou.aliyuncs.com/dbinggo-bitnami/kibana:8 bitnami/kibana:8
#  #elasticsearch 搜索引擎https://github.com/bitnami/containers/tree/main/bitnami/elasticsearch
#  elasticsearch:
#    image: bitnami/elasticsearch:8
#    hostname: elasticsearch
#    container_name: elasticsearch
#    privileged: true
#    environment:
#      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - ELASTICSEARCH_MAX_ALLOWED_MEMORY_PERCENTAGE:60
#      - TZ=Asia/Shanghai
#    volumes:
#      - ./elasticsearch/data:/bitnami/elasticsearch/data # sudo rm -rf elasticsearch ;sudo mkdir elasticsearch && sudo chown -R 1001:1001 elasticsearch
#      - ./elasticsearch/conf:/opt/bitnami/elasticsearch/config
#    ports:
#      - 9200:9200
#      - 9300:9300
#    networks:
#      - net01
#    healthcheck:
#      test: [ 'CMD', '/opt/bitnami/scripts/elasticsearch/healthcheck.sh' ]
#      interval: 10s
#      timeout: 10s
#      retries: 5
#    deploy:
#        resources:
#          limits:
#            cpus: '1'
#            memory: 1G
#          reservations:
#            memory: 512M
#  kibana:
#    image: bitnami/kibana:8
#    container_name: kibana
#    privileged: true
#    environment:
#      KIBANA_ELASTICSEARCH_URL: http://elasticsearch:9200
#      I18N_LOCALE: zh-CN
#      TZ: Asia/Shanghai
#
##    depends_on:
##      elasticsearch:
##        condition: service_healthy
#    volumes:
#        - ./kibana/data:/bitnami/kibana/data # sudo rm -rf kibana ; sudo mkdir kibana && sudo chown -R 1001:1001 kibana
#        - ./kibana/conf:/opt/bitnami/kibana/config
#    ports:
#      - 5601:5601
#    networks:
#      - net01
#----------------------------------------------------------------------------------------------